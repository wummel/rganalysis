# rganalysis.py: Add Replay Gain tags to your whole music library

To use this script, simply run it on your Music library directory. The
help text (`rganalysis.py --help`) contains (almost) all you need to
know:

<pre><code>
usage: rganalysis.py [-h] [-v] [-q] [-j JOBS] [-n]
                     [-g {album,track,folder,auto}] [-i] [-f] [--version]
                     [music_path [music_path ...]]

Add replaygain tags to your music files.

positional arguments:
  music_path            Music files or directories to search for music tracks.

optional arguments:
  -h, --help            show this help message and exit
  -v, --verbose         Print debug messages that are probably only useful if
                        something is going wrong.
  -q, --quiet           Do not print informational messages.
  -j JOBS, --jobs JOBS  Number of albums to analyze in parallel. The default
                        is the number of cores detected on your system.
  -n, --dry-run         Don't modify any files. Only analyze and report gain.
  -g {album,track,folder,auto}, --gain-type {album,track,folder,auto}
                        Can be "album", "track", "folder" or "auto". If
                        "track", only track gain values will be calculated,
                        and album gain values will be erased. If "album", both
                        track and album gain values will be calculated for
                        detected albums. If "folder", both track and album
                        gain values will be calculated for files in the same
                        folder. If "auto", then "album" mode will be used
                        except in directories that contain a file called
                        "TRACKGAIN" or ".TRACKGAIN". In these directories,
                        "track" mode will be used. The default setting is
                        "auto".
  -i, --include-hidden  Do not skip hidden files and directories.
  -f, --force-reanalyze
                        Reanalyze all files and recalculate replaygain values,
                        even if the files already have valid replaygain tags.
                        Normally, only files without replaygain tags will be
                        analyzed.
  --version             display the version number
</pre></code>

## Change detection

For each music path the last analysis date is remembered in the
~/.config/rganalysis/lastruns file.
If none of the given music paths are newer than the remembered date
then analysis is skipped.

## What is an album?

When doing "album" or "audiophile" Replay Gain tags, one needs to
carefully define an album. For example, if you happen to have half an
album in FLAC format and the other half in MP3, they might be at
different volumes to begin with, so calculating Replay Gain tags on
the whole album is a bad thing -- the MP3s will end up too loud and
the FLACs too quiet, or vice versa.

Anyway, this script considers two tracks to belong to the same "track
set" for the purposes of calculating audiophile gain if:

* They are in the same directory on the filesystem
* They have the same album name tag
* They have the same disc number tag (or lack thereof)
* They are both the same music format (MP3, OGG, FLAC, etc.)

When selecting "folder" as the --gain-type option, only the first
requirement (same directory) defines an album. This is useful if
all playlists and albums are stored in folders.

## Requirements

rganalysis.py uses GStreamer for ReplayGain analysis and Quodlibet
for music file modification.

On a Debian or Ubuntu system execute ``sudo apt-get install quodlibet``
to install all dependencies.

## See also

[Transfercoder](https://github.com/wummel/transfercoder), a
tool for transferring your music to your portable mp3 player while
simultaneously transcoding music formats that the player doesn't
recognize.
